{"version":3,"file":"mesh-simplifier.js","sources":["../src/math/Vector3.ts","../src/MeshSimplifiers/FastQuadric/structs/Triangle.ts","../src/math/SymmetricMatrix.ts","../src/MeshSimplifiers/FastQuadric/structs/Vertex.ts","../src/MeshSimplifiers/FastQuadric/structs/Ref.ts","../src/math/Face3.ts","../src/Timer.ts","../src/MeshSimplifiers/FastQuadric/FastQuadric.ts","../src/MeshSimplifiers/index.ts","../src/math/index.ts","../src/utils.ts","../src/Geometries/ThreeGeometry.ts","../src/Geometries/index.ts","../src/consts.ts","../src/Adapters/ThreeAdapter.ts","../src/Adapters/index.ts","../src/index.umd.ts"],"sourcesContent":["/*\n * Copyright (c) 2020 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nclass Vector3 {\n  static addVectors(v1: Vector3, v2: Vector3) {\n    return new Vector3().copy(v1).add(v2);\n  }\n\n  static subVectors(v1: Vector3, v2: Vector3) {\n    return new Vector3().copy(v1).sub(v2);\n  }\n\n  public x: number;\n  public y: number;\n  public z: number;\n\n  constructor(v0: number = 0, v1: number = 0, v2: number = 0) {\n    this.x = v0;\n    this.y = v1;\n    this.z = v2;\n  }\n\n  public copy(other: Vector3) {\n    this.x = other.x;\n    this.y = other.y;\n    this.z = other.z;\n    return this;\n  }\n\n  public add(other: Vector3) {\n    this.x += other.x;\n    this.y += other.y;\n    this.z += other.z;\n    return this;\n  }\n\n  public sub(other: Vector3) {\n    this.x -= other.x;\n    this.y -= other.y;\n    this.z -= other.z;\n    return this;\n  }\n\n  public dot(other: Vector3): number {\n    const { x: x1, y: y1, z: z1 } = this;\n    const { x: x2, y: y2, z: z2 } = other;\n\n    return x1 * x2 + y1 * y2 + z1 * z2;\n  }\n\n  public cross(other: Vector3): this {\n    const { x: x1, y: y1, z: z1 } = this;\n    const { x: x2, y: y2, z: z2 } = other;\n\n    this.x = y1 * z2 - z1 * y2;\n    this.y = z1 * x2 - x1 * z2;\n    this.z = x1 * y2 - y1 * x2;\n    return this;\n  }\n\n  public normalize(): this {\n    const length = this.length();\n\n    if (length > 0) {\n      const invLength = 1 / length;\n      this.x *= invLength;\n      this.y *= invLength;\n      this.z *= invLength;\n    }\n\n    return this;\n  }\n\n  public length(): number {\n    const { x, y, z } = this;\n    return Math.sqrt(x * x + y * y + z * z);\n  }\n\n  public scaleSclar(factor: number): this {\n    this.x *= factor;\n    this.y *= factor;\n    this.z *= factor;\n\n    return this;\n  }\n}\n\nexport default Vector3;\n","/*\n * Copyright (c) 2020 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport Vector3 from \"~/math/Vector3\";\n\nclass Triangle {\n  public originalIndex: number;\n  public v: [number, number, number];\n  public err: [number, number, number, number];\n  public deleted: boolean;\n  public dirty: boolean;\n  public n: Vector3;\n\n  constructor(idx: number) {\n    this.originalIndex = idx;\n    this.v = [0, 0, 0];\n    this.err = [0, 0, 0, 0];\n    this.deleted = false;\n    this.dirty = false;\n    this.n = new Vector3();\n  }\n}\n\nexport default Triangle;\n","/*\n * Copyright (c) 2020 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\n// Original code from\n// https://github.com/sp4cerat/Fast-Quadric-Mesh-Simplification/blob/master/src.gl/Simplify.h\n\nclass SymmetricMatrix {\n  static makePlane(a: number, b: number, c: number, d: number): SymmetricMatrix {\n    return new SymmetricMatrix(\n      a * a, a * b, a * c, a * d,\n             b * b, b * c, b * d,\n                    c * c, c * d,\n                           d * d,\n    );\n  }\n\n  public m: number[];\n\n  constructor(\n    m11: number = 0, m12: number = 0, m13: number = 0, m14: number = 0,\n                     m22: number = 0, m23: number = 0, m24: number = 0,\n                                      m33: number = 0, m34: number = 0,\n                                                       m44: number = 0,\n  ) {\n    this.m = new Array(10);\n    this.set(m11, m12, m13, m14, m22, m23, m24, m33, m34, m44);\n  }\n\n  public copy(other: SymmetricMatrix): this {\n    const m = other.m;\n    this.m = m.concat();\n    return this;\n  }\n\n  public set(\n    m11: number, m12: number, m13: number, m14: number,\n                 m22: number, m23: number, m24: number,\n                              m33: number, m34: number,\n                                           m44: number,\n  ) {\n    const m = this.m;\n    m[0] = m11; m[1] = m12; m[2] = m13; m[3] = m14;\n                m[4] = m22; m[5] = m23; m[6] = m24;\n                            m[7] = m33; m[8] = m34;\n                                        m[9] = m44;\n  }\n\n  public det(\n    a11: number, a12: number, a13: number,\n    a21: number, a22: number, a23: number,\n    a31: number, a32: number, a33: number,\n  ): number {\n    const m = this.m;\n    const det = m[a11] * m[a22] * m[a33]\n      + m[a13] * m[a21] * m[a32]\n      + m[a12] * m[a23] * m[a31]\n      - m[a13] * m[a22] * m[a31]\n      - m[a11] * m[a23] * m[a32]\n      - m[a12] * m[a21] * m[a33];\n    return det;\n  }\n\n  public add(other: SymmetricMatrix): this {\n    const m = this.m;\n    const n = other.m;\n    this.set(\n      m[0] + n[0], m[1] + n[1], m[2] + n[2], m[3] + n[3],\n                   m[4] + n[4], m[5] + n[5], m[6] + n[6],\n                                m[7] + n[7], m[8] + n[8],\n                                             m[9] + n[9],\n    );\n\n    return this;\n  }\n}\n\nexport default SymmetricMatrix;\n","/*\n * Copyright (c) 2020 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport Vector3 from \"~/math/Vector3\";\nimport SymmetricMatrix from \"~/math/SymmetricMatrix\";\n\nclass Vertex {\n  public originalIndex: number;\n  public p: Vector3;\n  public tstart: number;\n  public tcount: number;\n  public q: SymmetricMatrix;\n  public border: boolean;\n\n  constructor(idx: number) {\n    this.originalIndex = idx;\n    this.p = new Vector3();\n    this.tstart = 0;\n    this.tcount = 0;\n    this.q = new SymmetricMatrix();\n    this.border = false;\n  }\n}\n\nexport default Vertex;\n","/*\n * Copyright (c) 2020 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nclass Ref {\n  public tid: number;\n  public tvertex: number;\n\n  constructor() {\n    this.tid = 0;\n    this.tvertex = 0;\n  }\n}\n\nexport default Ref;\n","/*\n * Copyright (c) 2020 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport Vector3 from \"./Vector3\";\n\nclass Face3 {\n  public index: number;\n  public normal: Vector3;\n\n  constructor(\n    public a: number,\n    public b: number,\n    public c: number\n  ) {}\n}\n\nexport default Face3;\n","/*\n * Copyright (c) 2020 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nclass Timer {\n  private _diff: number = 0;\n  private _startTime: number | [number, number] | null = null;\n\n  /**\n   * Time diff in miliseconds\n   */\n  public get diff() { return this._diff; }\n\n  public start(): void {\n    if (typeof process !== \"undefined\" && process.hrtime) {\n      // Use high resolution timer in Node\n      this._startTime = process.hrtime();\n    } else {\n      this._startTime = Date.now();\n    }\n  }\n\n  public end(): void {\n    // Not started\n    if (this._startTime == null) return;\n\n    if (typeof process !== \"undefined\" && process.hrtime) {\n      // Use high resolution timer in Node\n      const diff = process.hrtime(this._startTime as [number, number]);\n      const diffInMiliSeconds = 1000 * (diff[0] + diff[1] * 1e-9); // diff[1] is in nanoseconds\n\n      this._diff = diffInMiliSeconds;\n    } else {\n      this._diff = Date.now() - (this._startTime as number);\n    }\n\n    this._startTime = null;\n  }\n}\n\nexport default Timer;\n","/*\n * Copyright (c) 2020 NAVER Corp.\n * egjs projects are licensed under the MIT license\n * Original code: https://github.com/sp4cerat/Fast-Quadric-Mesh-Simplification\n * License: MIT\n */\n\nimport MeshSimplifier from \"../MeshSimplifier\";\nimport Triangle from \"./structs/Triangle\";\nimport Vertex from \"./structs/Vertex\";\nimport Ref from \"./structs/Ref\";\nimport Vector3 from \"~/math/Vector3\";\nimport Face3 from \"~/math/Face3\";\nimport SymmetricMatrix from \"~/math/SymmetricMatrix\";\nimport Adapter from \"~/Adapters/Adapter\";\nimport Geometry from \"~/Geometries/Geometry\";\nimport Timer from \"~/Timer\";\n\nclass FastQuadric implements MeshSimplifier {\n  /* Options */\n  public targetPercentage: number;\n  public aggressiveness: number;\n\n  private _triangles: Triangle[];\n  private _vertices: Vertex[];\n  private _refs: Ref[];\n  private _timer: Timer;\n\n  public get timeConsumed() { return this._timer.diff; }\n\n  constructor({\n    targetPercentage = 0.5,\n    aggressiveness = 7\n  } = {}) {\n    this._triangles = [];\n    this._vertices = [];\n    this._refs = [];\n    this.targetPercentage = targetPercentage;\n    this.aggressiveness = aggressiveness;\n    this._timer = new Timer();\n  }\n\n  public simplify(target: Adapter | Geometry): this {\n    const timer = this._timer;\n    timer.start();\n\n    if ((target as Adapter).geometries) {\n      (target as Adapter).geometries.forEach(geometry => {\n        this._process(geometry);\n      });\n    } else {\n      this._process(target as Geometry);\n    }\n\n    timer.end();\n\n    return this;\n  }\n\n  private _process(geometry: Geometry) {\n    this._getData(geometry);\n\n    const triangles = this._triangles;\n    const vertices = this._vertices;\n    const refs = this._refs;\n    const targetPercentage = this.targetPercentage;\n    const aggressiveness = this.aggressiveness;\n\n    const targetCount = this._triangles.length * targetPercentage;\n\n    triangles.forEach(triangle => triangle.deleted = false);\n\n    let deletedTriangles: number = 0;\n    const deleted0: boolean[] = [];\n    const deleted1: boolean[] = [];\n    const triangleCount = triangles.length;\n\n    for (let iteration = 0; iteration < 100; iteration++) {\n      // Break when target number of triangles reached\n      if (triangleCount - deletedTriangles <= targetCount) break;\n\n      // Update mesh once in a while\n\t\t\tif (iteration % 5 === 0) {\n\t\t\t\tthis._updateMesh(iteration);\n      }\n\n      // Clear dirty flag\n      triangles.forEach(triangle => triangle.dirty = false);\n\n      //\n\t\t\t// All triangles with edges below the threshold will be removed\n\t\t\t//\n\t\t\t// The following numbers works well for most models.\n\t\t\t// If it does not, try to adjust the 3 parameters\n      //\n      const threshold = 0.000000001 * Math.pow(iteration + 3, aggressiveness);\n\n      for (let i = triangles.length - 1; i >= 0; i--) {\n        const t = triangles[i];\n        if (t.err[3] > threshold || t.deleted || t.dirty) continue;\n\n        for (let j = 0; j < 3; j++) {\n          if (t.err[j] < threshold) {\n            const i0 = t.v[j];\n            const i1 = t.v[(j + 1) % 3];\n\n            const v0 = vertices[i0];\n            const v1 = vertices[i1];\n\n            // Border check\n            if (v0.border || v1.border) continue;\n\n            // Compute vertex to collapse to\n            const p = new Vector3();\n            this._calculateError(i0, i1, p);\n\n            deleted0.splice(0); // normals temporarily\n            deleted1.splice(0); // normals temporarily\n\n            // Don't remove if flipped\n            if (this._flipped(p, i1, v0, deleted0)) continue;\n            if (this._flipped(p, i0, v1, deleted1)) continue;\n\n            // Not flipped, so remove edge\n            v0.p = p;\n            v0.q.add(v1.q);\n\n            const tstart = refs.length;\n\n            deletedTriangles += this._updateTriangles(i0, v0, deleted0);\n            deletedTriangles += this._updateTriangles(i0, v1, deleted1);\n\n            const tcount = refs.length - tstart;\n\n            v0.tstart = tstart;\n            v0.tcount = tcount;\n            break;\n          }\n        }\n\n        // Done?\n        if (triangleCount - deletedTriangles <= targetCount) break;\n      }\n    }\n\n    this._compactMesh();\n\n    this._setData(geometry);\n  }\n\n  private _getData(geometry: Geometry) {\n    const data = geometry.prepare();\n\n    this._vertices = data.vertices.map((v, idx) => {\n      const vertex = new Vertex(idx);\n      vertex.p.copy(v);\n      return vertex;\n    });\n\n    this._triangles = data.faces.map((f, idx) => {\n      const triangle = new Triangle(idx);\n      triangle.v = [f.a, f.b, f.c];\n\n      return triangle;\n    });\n\n    this._refs = [];\n  }\n\n  private _setData(geometry: Geometry) {\n    const triangles = this._triangles;\n\n    const vertices = this._vertices.map(vertex => vertex.p);\n    const faces = triangles.map(triangle => {\n      const v = triangle.v;\n      return new Face3(v[0], v[1], v[2]);\n    });\n\n    const unculledVertices = this._vertices.map(v => v.originalIndex);\n    const unculledFaces = this._triangles.map(f => f.originalIndex);\n\n    geometry.update({\n      vertices,\n      faces,\n      unculledVertices,\n      unculledFaces,\n    });\n  }\n\n  private _flipped(p: Vector3, i: number, v: Vertex, deleted: boolean[]): boolean {\n    const triangles = this._triangles;\n    const vertices = this._vertices;\n    const refs = this._refs;\n\n    for (let k = 0; k < v.tcount; k++) {\n      const ref = refs[v.tstart + k];\n      const t = triangles[ref.tid];\n      if (t.deleted) continue;\n\n      const s = ref.tvertex;\n      const id1 = t.v[(s + 1) % 3];\n      const id2 = t.v[(s + 2) % 3];\n\n      if (id1 === i || id2 === i) {\n        deleted[k] = true;\n        continue;\n      }\n\n      const d1 = Vector3.subVectors(vertices[id1].p, p);\n      const d2 = Vector3.subVectors(vertices[id2].p, p);\n      d1.normalize();\n      d2.normalize();\n\n      if (Math.abs(d1.dot(d2)) > 0.999) return true;\n\n      const n = new Vector3().copy(d1).cross(d2);\n      n.normalize();\n      deleted[k] = false;\n      if (n.dot(t.n) < 0.2) return true;\n    }\n    return false;\n  }\n\n  private _updateTriangles(i: number, v: Vertex, deleted: boolean[]): number {\n    const triangles = this._triangles;\n    const refs = this._refs;\n    const p = new Vector3();\n\n    let deletedCount = 0;\n    for (let k = 0; k < v.tcount; k++) {\n      const r = refs[v.tstart + k];\n      const t = triangles[r.tid];\n\n      if (t.deleted) continue;\n      if (deleted[k]) {\n        t.deleted = true;\n        deletedCount++;\n        continue;\n      }\n\n      t.v[r.tvertex] = i;\n      t.dirty = true;\n      t.err[0] = this._calculateError(t.v[0], t.v[1], p);\n      t.err[1] = this._calculateError(t.v[1], t.v[2], p);\n      t.err[2] = this._calculateError(t.v[2], t.v[0], p);\n      t.err[3] = Math.min(t.err[0], t.err[1], t.err[2]);\n      refs.push(r);\n    }\n\n    return deletedCount;\n  }\n\n  private _updateMesh(iteration: number) {\n    const vertices = this._vertices;\n    const refs = this._refs;\n\n\t\tif (iteration > 0) {\n      // compact triangles\n      this._triangles = this._triangles.filter(triangle => !triangle.deleted);\n\t\t} else {\n      //\n      // Init Quadrics by Plane & Edge Errors\n      //\n      // required at the beginning ( iteration == 0 )\n      // recomputing during the simplification is not required,\n      // but mostly improves the result for closed meshes\n      //\n      vertices.forEach(vertex => vertex.q = new SymmetricMatrix());\n\n      this._triangles.forEach(t => {\n        const p = t.v.map(v => vertices[v].p);\n        const n = Vector3.subVectors(p[1], p[0])\n          .cross(Vector3.subVectors(p[2], p[0]))\n          .normalize();\n\n        t.n = n;\n        const tmp = SymmetricMatrix.makePlane(n.x, n.y, n.z, -n.dot(p[0]));\n\n        t.v.forEach(v => vertices[v].q.add(tmp));\n      });\n\n      this._triangles.forEach(t => {\n        const p = new Vector3();\n        t.v.forEach((v, i) => {\n          t.err[i] = this._calculateError(v, t.v[(i + 1) % 3], p);\n        });\n      });\n    }\n\n    // Init Reference ID list\n    vertices.forEach(vertex => {\n      vertex.tstart = 0;\n      vertex.tcount = 0;\n    });\n\n    const triangles = this._triangles;\n    triangles.forEach(triangle => {\n      triangle.v.forEach(v => vertices[v].tcount++);\n    });\n\n    let tstart = 0;\n    vertices.forEach(v => {\n      v.tstart = tstart;\n      tstart += v.tcount;\n      v.tcount = 0;\n    });\n\n    // Write References\n    for (let i = refs.length; i < triangles.length * 3; i++) {\n\t\t\trefs[i] = new Ref();\n\t\t}\n\n    triangles.forEach((t, i) => {\n      for (let j = 0; j < 3; j++) {\n        const v = vertices[t.v[j]];\n\n        refs[v.tstart + v.tcount].tid = i;\n        refs[v.tstart + v.tcount].tvertex = j;\n        v.tcount++;\n      };\n    });\n\n\t\t// Identify boundary : vertices[].border=0,1\n\t\tif (iteration === 0) {\n      vertices.forEach(vertex => vertex.border = false);\n      vertices.forEach(v => {\n        // clear\n        const vcount: number[] = [];\n        const vids: number[] = [];\n\n        for (let i = 0; i < v.tcount; i++) {\n          const k = refs[v.tstart + i].tid;\n          const t = triangles[k];\n\n          for (let j = 0; j < 3; j++) {\n            const id = t.v[j];\n            let ofs = 0;\n\n            while (ofs < vcount.length) {\n              if (vids[ofs] === id) break;\n              ofs++;\n            }\n\n            if (ofs === vcount.length) {\n              vcount.push(1);\n              vids.push(id);\n            } else {\n              vcount[ofs]++;\n            }\n          };\n        }\n\n        for (let j = 0; j < vcount.length; j++) {\n          if (vcount[j] === 1) {\n            vertices[vids[j]].border = true;\n          }\n        };\n      });\n\t\t}\n  }\n\n  // Error for one edge\n  private _calculateError(idV1: number, idV2: number, result: Vector3) {\n    // Compute interpolated vertex\n    const vertices = this._vertices;\n    const v1 = vertices[idV1];\n    const v2 = vertices[idV2];\n    const q = new SymmetricMatrix().copy(v1.q).add(v2.q);\n    const border = v1.border && v2.border;\n    const det = q.det(0, 1, 2, 1, 4, 5, 2, 5, 7);\n\n    let error: number = 0;\n\n    if (det !== 0 && !border) {\n      // q_delta is invertible\n      result.x = -1 / det * (q.det(1, 2, 3, 4, 5, 6, 5, 7, 8)); // vx = A41/det(q_delta)\n      result.y =  1 / det * (q.det(0, 2, 3, 1, 5, 6, 2, 7, 8)); // vy = A42/det(q_delta)\n      result.z = -1 / det * (q.det(0, 1, 3, 1, 4, 6, 2, 5, 8)); // vz = A43/det(q_delta)\n      error = this._vertexError(q, result);\n    } else {\n      const p1 = v1.p;\n      const p2 = v2.p;\n      const p3 = new Vector3(\n        (p1.x + p2.x) * 0.5,\n        (p1.y + p2.y) * 0.5,\n        (p1.z + p2.z) * 0.5,\n      );\n\n      const error1 = this._vertexError(q, p1);\n      const error2 = this._vertexError(q, p2);\n      const error3 = this._vertexError(q, p3);\n      error = Math.min(error1, error2, error3);\n\n      if (error1 === error) result.copy(p1);\n      if (error2 === error) result.copy(p2);\n      if (error3 === error) result.copy(p3);\n    }\n\n    return error;\n  }\n\n  private _vertexError(q: SymmetricMatrix, v: Vector3): number {\n    const {x, y, z} = v;\n    const m = q.m;\n\n    const err = m[0] * x * x\n      + 2 * m[1] * x * y\n      + 2 * m[2] * x * z\n      + 2 * m[3] * x\n      +     m[4] * y * y\n      + 2 * m[5] * y * z\n      + 2 * m[6] * y\n      +     m[7] * z * z\n      + 2 * m[8] * z\n      +     m[9];\n\n    return err;\n  }\n\n  private _compactMesh() {\n    this._triangles = this._triangles.filter(t => !t.deleted);\n\n    const triangles = this._triangles;\n    const vertices = this._vertices;\n\n    vertices.forEach(vertex => vertex.tcount = 0);\n    triangles.forEach(triangle => {\n      triangle.v.forEach(v => {\n        vertices[v].tcount = 1;\n      });\n    });\n\n    let dst = 0;\n    vertices.forEach(vertex => {\n      if (vertex.tcount > 0) {\n        vertex.tstart = dst;\n        vertices[dst].originalIndex = vertex.originalIndex;\n        vertices[dst].p = vertex.p;\n        dst++;\n      }\n    });\n\n    triangles.forEach(t => {\n      t.v.forEach((v, i) => {\n        t.v[i] = vertices[v].tstart;\n      });\n    });\n\n    vertices.splice(dst); // resize\n  }\n}\n\nexport default FastQuadric;\n","/*\n * Copyright (c) 2020 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport FastQuadric from \"./FastQuadric/FastQuadric\";\n\nexport {\n  FastQuadric as FastQuadric,\n}\n","/*\n * Copyright (c) 2020 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport Vector3 from \"./Vector3\";\nimport Face3 from \"./Face3\";\nimport SymmetricMatrix from \"./SymmetricMatrix\";\n\nexport {\n  Vector3,\n  Face3,\n  SymmetricMatrix,\n}\n","export const getUintArrayByVertexLength = (length: number) => {\n  if (length < 256) {\n    return Uint8Array;\n  } else if (length < 65536) {\n    return Uint16Array;\n  } else {\n    return Uint32Array;\n  }\n}\n","/*\n * Copyright (c) 2020 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport * as THREE from \"three\";\nimport Geometry from \"./Geometry\";\nimport Vector3 from \"~/math/Vector3\";\nimport Face3 from \"~/math/Face3\";\nimport { getUintArrayByVertexLength } from \"~/utils\";\n\n// TODO: Support line geometry\n\n/**\n * Adapter class for three.js geometry\n * @example\n * import * as THREE from \"three\";\n * import { FastQuadric, ThreeGeometry } from \"mesh-simplifier\";\n *\n * const geometry = new THREE.TorusKnotGeometry(10);\n * const adaptedGeometry = new ThreeGeometry(geometry);\n *\n * const simplifier = new FastQuadric();\n * simplifier.simplify(adaptedGeometry);\n *\n * // Now do whatever you want with simplified geometry\n * const material = new THREE.MeshBasicMaterial();\n * const mesh = new THREE.Mesh(adaptedGeometry.simplified, material);\n */\nclass ThreeGeometry implements Geometry {\n  public originalGeometry: THREE.BufferGeometry;\n\n  constructor(geometry: THREE.BufferGeometry) {\n    this.originalGeometry = geometry;\n  }\n\n  public prepare() {\n    const geometry = this.originalGeometry;\n    const position = geometry.attributes.position;\n    const face = geometry.index;\n\n    const vertexCount = position?.count ?? 0;\n    const faceCount = (face?.count ?? 0) / 3;\n\n    const vertices = new Array(vertexCount);\n    const faces = new Array(faceCount);\n\n    for (let idx = 0; idx < vertexCount; idx++) {\n      const startIdx = position.itemSize * idx;\n      const arr = position.array;\n\n      vertices[idx] = new Vector3(\n        arr[startIdx + 0],\n        arr[startIdx + 1],\n        arr[startIdx + 2]\n      );\n    }\n\n    for (let idx = 0; idx < faceCount; idx++) {\n      const startIdx = 3 * idx;\n      const arr = face!.array;\n\n      faces[idx] = new Face3(\n        arr[startIdx + 0],\n        arr[startIdx + 1],\n        arr[startIdx + 2]\n      );\n    }\n\n    return {\n      vertices,\n      faces\n    }\n  }\n\n  public update(datas: {\n    vertices: Vector3[],\n    faces: Face3[],\n    unculledVertices: number[],\n    unculledFaces: number[],\n  }): this {\n    const { vertices, faces, unculledVertices } = datas\n\n    const geometry = this.originalGeometry;\n    const hasUV = geometry.hasAttribute(\"uv\");\n\n    if (hasUV) {\n      const uvArray = new Float32Array(2 * vertices.length);\n      const origUV = geometry.attributes.uv;\n\n      unculledVertices.forEach((vertexIdx, idx) => {\n        const offset = idx * 2;\n        uvArray[offset + 0] = origUV.getX(vertexIdx);\n        uvArray[offset + 1] = origUV.getY(vertexIdx);\n      });\n\n      geometry.setAttribute(\"uv\", new THREE.BufferAttribute(uvArray, 2));\n    }\n\n    const IndexTypedArray = getUintArrayByVertexLength(vertices.length);\n\n    const vertexArray = new Float32Array(3 * vertices.length);\n    const faceArray = new IndexTypedArray(3 * faces.length);\n\n    vertices.forEach((vertex, idx) => {\n      const offset = idx * 3;\n      vertexArray[offset + 0] = vertex.x;\n      vertexArray[offset + 1] = vertex.y;\n      vertexArray[offset + 2] = vertex.z;\n    });\n\n    faces.forEach((face, idx) => {\n      const offset = idx * 3;\n      faceArray[offset + 0] = face.a;\n      faceArray[offset + 1] = face.b;\n      faceArray[offset + 2] = face.c;\n    });\n\n    const vertexBuffer = new THREE.BufferAttribute(vertexArray, 3);\n    const faceBuffer = new THREE.BufferAttribute(faceArray, 1);\n\n    geometry.setAttribute(\"position\", vertexBuffer);\n    geometry.setIndex(faceBuffer);\n\n    geometry.computeVertexNormals();\n\n    return this;\n  }\n}\n\nexport default ThreeGeometry;\n","/*\n * Copyright (c) 2020 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport Geometry from \"./Geometry\";\nimport ThreeGeometry from \"./ThreeGeometry\";\n\nexport {\n  Geometry,\n  ThreeGeometry\n}\n","export const THREE_STANDARD_MAPS = [\n  \"alphaMap\",\n  \"aoMap\",\n  \"bumpMap\",\n  \"displacementMap\",\n  \"emissiveMap\",\n  \"envMap\",\n  \"lightMap\",\n  \"map\",\n  \"metalnessMap\",\n  \"normalMap\",\n  // \"roughnessMap\", excluded on purpose\n];\n","/*\n * Copyright (c) 2020 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport * as THREE from \"three\";\nimport Adapter from \"./Adapter\";\nimport ThreeGeometry from \"~/Geometries/ThreeGeometry\";\nimport { THREE_STANDARD_MAPS } from \"~/consts\";\n\nclass ThreeAdapter<OBJ extends THREE.Object3D> implements Adapter {\n  public object: OBJ;\n\n  constructor(original: OBJ, clone: boolean = false) {\n    this.object = clone\n      ? original.clone()\n      : original;\n\n    if (clone) {\n      this._cloneMeshes(original);\n    }\n  }\n\n  public get geometries() {\n    const geometries: ThreeGeometry[] = [];\n    this.object.traverse(obj => {\n      if ((obj as THREE.Mesh).isMesh) {\n        const mesh = obj as THREE.Mesh;\n        const threeGeometry = new ThreeGeometry(mesh.geometry);\n\n        geometries.push(threeGeometry);\n      }\n    });\n\n    return geometries;\n  }\n\n  private _cloneMeshes(original: OBJ) {\n    const origMeshes: THREE.Mesh[] = [];\n    const clonedMeshes: THREE.Mesh[] = [];\n\n    original.traverse(obj => {\n      if ((obj as THREE.Mesh).isMesh) origMeshes.push(obj as THREE.Mesh);\n    });\n    this.object.traverse(obj => {\n      if ((obj as THREE.Mesh).isMesh) clonedMeshes.push(obj as THREE.Mesh);\n    });\n\n    clonedMeshes.forEach((mesh, meshIdx) => {\n      const origMesh = origMeshes[meshIdx];\n\n      mesh.geometry = mesh.geometry.clone();\n      mesh.material = Array.isArray(mesh.material)\n        ? mesh.material.map(mat => this._cloneMaterial(mat))\n        : this._cloneMaterial(mesh.material);\n\n      if ((mesh as THREE.SkinnedMesh).isSkinnedMesh) {\n        this._skinnedMeshToMesh(\n          mesh as THREE.SkinnedMesh,\n          (origMesh as THREE.SkinnedMesh).skeleton\n        );\n      }\n    });\n  }\n\n  private _cloneMaterial(mat: THREE.Material) {\n    const clonedMat = mat.clone();\n\n    if (mat.type === \"MeshStandardMaterial\") {\n      const standardMat = mat as THREE.MeshStandardMaterial;\n      THREE_STANDARD_MAPS.forEach(mapName => {\n        if (standardMat[mapName] == null) return;\n\n        const prevMat = standardMat[mapName];\n        standardMat[mapName] = standardMat[mapName].clone();\n        standardMat[mapName].needsUpdate = true;\n\n        if (mapName === \"metalnessMap\" && prevMat === standardMat.roughnessMap) {\n          standardMat.roughnessMap = standardMat.metalnessMap;\n        }\n      });\n    } else {\n      for (const property in clonedMat) {\n        if (clonedMat[property] && clonedMat[property].isTexture) {\n          clonedMat[property] = clonedMat[property].clone();\n          clonedMat[property].needsUpdate = true;\n        }\n      }\n    }\n\n    clonedMat.needsUpdate = true;\n    return clonedMat;\n  }\n\n  private _skinnedMeshToMesh(skinnedMesh: THREE.SkinnedMesh, skeleton: THREE.Skeleton) {\n    const geometry = skinnedMesh.geometry as THREE.BufferGeometry;\n    const positions = geometry.attributes.position;\n    const skinIndicies = geometry.attributes.skinIndex;\n    const skinWeights = geometry.attributes.skinWeight;\n\n    skinnedMesh.updateMatrixWorld();\n    skeleton.update();\n\n    const boneMatricies = skeleton.boneMatrices;\n    const finalMatrix = new THREE.Matrix4();\n    for (let posIdx = 0; posIdx < positions.count; posIdx++) {\n      finalMatrix.identity();\n\n      const skinned = new THREE.Vector4();\n      skinned.set(0, 0, 0, 0);\n      const skinVertex = new THREE.Vector4();\n      skinVertex.set(\n        positions.getX(posIdx),\n        positions.getY(posIdx),\n        positions.getZ(posIdx),\n        1,\n      ).applyMatrix4(skinnedMesh.bindMatrix);\n\n      const weights = [\n        skinWeights.getX(posIdx),\n        skinWeights.getY(posIdx),\n        skinWeights.getZ(posIdx),\n        skinWeights.getW(posIdx),\n      ];\n\n      const indicies = [\n        skinIndicies.getX(posIdx),\n        skinIndicies.getY(posIdx),\n        skinIndicies.getZ(posIdx),\n        skinIndicies.getW(posIdx),\n      ];\n\n      weights.forEach((weight, index) => {\n        const boneMatrix = new THREE.Matrix4().fromArray(boneMatricies, indicies[index] * 16).multiplyScalar(weight);\n        skinned.add(skinVertex.clone().applyMatrix4(boneMatrix));\n      });\n\n      const transformed = skinned.applyMatrix4(skinnedMesh.bindMatrixInverse);\n\n      positions.setXYZ(posIdx, transformed.x, transformed.y, transformed.z);\n    }\n\n    const parent = skinnedMesh.parent!;\n    const mesh = new THREE.Mesh(skinnedMesh.geometry, skinnedMesh.material).copy(skinnedMesh);\n\n    (mesh.geometry as THREE.BufferGeometry).deleteAttribute(\"skinIndex\");\n    (mesh.geometry as THREE.BufferGeometry).deleteAttribute(\"skinWeight\");\n\n    parent.remove(skinnedMesh);\n    parent.add(mesh);\n  }\n}\n\nexport default ThreeAdapter;\n","/*\n * Copyright (c) 2020 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport Adapter from \"./Adapter\";\nimport ThreeAdapter from \"./ThreeAdapter\";\n\nexport {\n  Adapter,\n  ThreeAdapter,\n}\n","/*\n * Copyright (c) 2020 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport * as Simplifiers from \"./MeshSimplifiers\";\nimport * as math from \"./math\";\nimport * as Geometries from \"./Geometries\";\nimport * as Adapters from \"./Adapters\";\n\nexport default {\n  ...Simplifiers,\n  ...math,\n  ...Geometries,\n  ...Adapters,\n}\n"],"names":["v0","v1","v2","x","y","z","Vector3","copy","add","sub","other","_a","x1","y1","z1","x2","y2","z2","length","invLength","Math","sqrt","factor","idx","originalIndex","v","err","deleted","dirty","n","m11","m12","m13","m14","m22","m23","m24","m33","m34","m44","m","Array","set","SymmetricMatrix","a","b","c","d","concat","a11","a12","a13","a21","a22","a23","a31","a32","a33","det","p","tstart","tcount","q","border","tid","tvertex","Object","_diff","process","hrtime","_startTime","Date","now","diff","diffInMiliSeconds","_b","_c","targetPercentage","_d","aggressiveness","_triangles","_vertices","_refs","_timer","Timer","target","timer","start","geometries","forEach","geometry","_this","_process","end","_getData","triangles","vertices","refs","targetCount","triangle","deletedTriangles","deleted0","deleted1","triangleCount","iteration","_updateMesh","threshold","pow","i","t","j","i0","i1","_calculateError","splice","_flipped","_updateTriangles","_compactMesh","_setData","data","prepare","map","vertex","Vertex","faces","f","Triangle","Face3","unculledVertices","unculledFaces","update","k","ref","s","id1","id2","d1","subVectors","d2","normalize","abs","dot","cross","deletedCount","r","min","push","filter","tmp","makePlane","Ref","vcount","vids","id","ofs","idV1","idV2","result","error","_vertexError","p1","p2","p3","error1","error2","error3","dst","getUintArrayByVertexLength","Uint8Array","Uint16Array","Uint32Array","originalGeometry","position","attributes","face","index","vertexCount","count","faceCount","startIdx","itemSize","arr","array","datas","hasUV","hasAttribute","uvArray_1","Float32Array","origUV_1","uv","vertexIdx","offset","getX","getY","setAttribute","THREE","BufferAttribute","IndexTypedArray","vertexArray","faceArray","vertexBuffer","faceBuffer","setIndex","computeVertexNormals","THREE_STANDARD_MAPS","original","clone","object","_cloneMeshes","traverse","obj","isMesh","mesh","threeGeometry","ThreeGeometry","origMeshes","clonedMeshes","meshIdx","origMesh","material","isArray","mat","_cloneMaterial","isSkinnedMesh","_skinnedMeshToMesh","skeleton","clonedMat","type","standardMat_1","mapName","prevMat","needsUpdate","roughnessMap","metalnessMap","property","isTexture","skinnedMesh","positions","skinIndicies","skinIndex","skinWeights","skinWeight","updateMatrixWorld","boneMatricies","boneMatrices","finalMatrix","Matrix4","posIdx","identity","skinned","Vector4","skinVertex","getZ","applyMatrix4","bindMatrix","weights","getW","indicies","weight","boneMatrix","fromArray","multiplyScalar","transformed","bindMatrixInverse","setXYZ","parent","Mesh","deleteAttribute","remove","Simplifiers","math","Geometries","Adapters"],"mappings":"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"}